<!-- ant build file for cse 401 compiler project -->
<!-- hp, 1/10, 8/11 -->

<!-- Possible future changes:
     - use symbolic variables for various class and path names
     - add options to interface better with internal eclipse compiler  -->

<project name="minijava" default="compile">

  <!-- build targets for compiler -->
  <!-- you might not need to change much of anything here except for compiler warnings -->

  <target name="init">
    <mkdir dir="build/classes" />
  </target>

  <target name="clean">
    <delete dir="build"/>
    <delete file="src/Parser/parser.java"/>
    <delete file="src/Parser/sym.java"/>
    <delete file="src/Scanner/scanner.java"/>
    <delete file="src/Scanner/scanner.java~"/>
  </target>

  <target name="check.parse.files">
    <uptodate targetfile="src/Parser/parser.java"
	      srcfile="src/Parser/minijava.cup"
	      property="parser.uptodate"/>
    <uptodate targetfile="src/Scanner/scanner.java"
	      srcfile="src/Scanner/minijava.jflex"
	      property="scanner.uptodate"/>
    <condition property="scanner.parser.uptodate">
      <and>
	<isset property="scanner.uptodate"/>
	<isset property="parser.uptodate"/>
      </and>
    </condition>
  </target>

  <target name="gen-parser" depends="check.parse.files"
	  unless="parser.uptodate">
    <java jar="lib/CUP.jar" fork="true" failonerror="true">
      <!--<arg value="-dump"/>-->
      <arg value="-destdir"/> <arg value="src/Parser"/>
      <arg value="src/Parser/minijava.cup"/>
    </java>
  </target>

  <target name="gen-scanner" depends="gen-parser, check.parse.files"
	  unless="scanner.parser.uptodate">
    <java classname="JFlex.Main" classpath="lib/JFlex.jar"
	  fork="true" failonerror="true">
      <arg value="src/Scanner/minijava.jflex"/>
    </java>
  </target>

<!-- Remove comment on compilerarg line below to generate compiler warnings 
     for unchecked casts.  Even if the minijava code is clean, there will be
     warnings in java code generated by cup. -->

  <target name="compile" depends="init, gen-scanner">
    <javac srcdir="src" destdir="build/classes" classpath="lib/CUP.jar" includeAntRuntime="false" debug="true">
      <!-- <compilerarg value="-Xlint:unchecked"/> -->
    </javac>
  </target>

  <target name="compile-samples" depends="init">
    <javac srcdir="SamplePrograms" destdir="build/classes" classpath="lib/CUP.jar" includeAntRuntime="false" debug="true">
      <!-- <compilerarg value="-Xlint:unchecked"/> -->
    </javac>
  </target>

  <!-- targets for running test programs -->
  <!-- you will want to expand on what's here. -->

  <!-- run scanner and parser test programs on initial demo input -->

  <target name="test-scanner" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/Example.java">
    </java>
  </target>

  <target name="test-parser" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/Example.java">
    </java>
  </target>

  <target name="test-semantics" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/Example.java">
    </java>
  </target>

  <target name="test-codegen" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/Example.java">
    </java>
  </target>

  <!-- CodeGen -->

  <target name="codegen-BinarySearch" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BinarySearch.java">
    </java>
  </target>

   <target name="codegen-BinaryTree" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BinaryTree.java">
    </java>
  </target>

   <target name="codegen-BubbleSort" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BubbleSort.java">
    </java>
  </target>

   <target name="codegen-Factorial" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/Factorial.java">
    </java>
  </target>

   <target name="codegen-LinearSearch" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/LinearSearch.java">
    </java>
  </target>

   <target name="codegen-LinkedList" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/LinkedList.java">
    </java>
  </target>

   <target name="codegen-QuickSort" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/QuickSort.java">
    </java>
  </target>

  <target name="codegen-TreeVisitor" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
      fork="true" input="SamplePrograms/SampleMiniJavaPrograms/TreeVisitor.java">
    </java>
  </target>

  <target name="codegen-ErrorExample" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
      fork="true" input="SampleErrorPrograms/ErrorExample.java">
    </java>
  </target>

  <target name="codegen-ErrorTreeVisitor" depends="compile">
    <java classname="MiniJava" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SampleErrorPrograms/ErrorTreeVisitor.java">
	</java>
  </target>

  <!-- run scanner test programs -->

  <target name="scan-binarysearch" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BinarySearch.java">
    </java>
  </target>

    <target name="scan-binarytree" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BinaryTree.java">
    </java>
  </target>

  <target name="scan-bubblesort" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BubbleSort.java">
    </java>
  </target>

  <target name="scan-factorial" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/Factorial.java">
    </java>
  </target>

  <target name="scan-linearsearch" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/LinearSearch.java">
    </java>
  </target>

  <target name="scan-linkedlist" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/LinkedList.java">
    </java>
  </target>

  <target name="scan-quicksort" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/QuickSort.java">
    </java>
  </target>

  <target name="scan-treevisitor" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/TreeVisitor.java">
    </java>
  </target>

  <!-- run parser test programs -->

  <target name="parse-BinarySearch" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BinarySearch.java">
    </java>
  </target>

  <target name="parse-BinaryTree" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BinaryTree.java">
    </java>
  </target>

  <target name="parse-BubbleSort" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BubbleSort.java">
    </java>
  </target>

  <target name="parse-Factorial" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/Factorial.java">
    </java>
  </target>

  <target name="parse-LinearSearch" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/LinearSearch.java">
    </java>
  </target>

  <target name="parse-LinkedList" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/LinkedList.java">
    </java>
  </target>

  <target name="parse-QuickSort" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/QuickSort.java">
    </java>
  </target>

  <target name="parse-TreeVisitor" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/TreeVisitor.java">
    </java>
  </target>

  <!-- Semantic Checks for Binary Search -->
  <target name="semanticcheck-BinarySearch" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BinarySearch.java">
    </java>
  </target>

   <target name="semanticcheck-BinaryTree" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BinaryTree.java">
    </java>
  </target>

   <target name="semanticcheck-BubbleSort" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/BubbleSort.java">
    </java>
  </target>

   <target name="semanticcheck-Factorial" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/Factorial.java">
    </java>
  </target>

   <target name="semanticcheck-LinearSearch" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/LinearSearch.java">
    </java>
  </target>

   <target name="semanticcheck-LinkedList" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/LinkedList.java">
    </java>
  </target>

   <target name="semanticcheck-QuickSort" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SamplePrograms/SampleMiniJavaPrograms/QuickSort.java">
    </java>
  </target>

  <target name="semanticcheck-TreeVisitor" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
      fork="true" input="SamplePrograms/SampleMiniJavaPrograms/TreeVisitor.java">
    </java>
  </target>

  <target name="semanticcheck-ErrorExample" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
      fork="true" input="SampleErrorPrograms/ErrorExample.java">
    </java>
  </target>

  <target name="semanticcheck-ErrorTreeVisitor" depends="compile">
    <java classname="TestSemantics" classpath="build/classes;lib/CUP.jar"
	  fork="true" input="SampleErrorPrograms/ErrorTreeVisitor.java">
	</java>
  </target>
</project>
